# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kqzO3KidKdYrn3s5riwH7j2gIjPQ-7tO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv("wines_SPA.csv")

df.info()

"""> ### **Performing EDA**"""

print(df.duplicated().sum())

df = df.drop_duplicates()

Q1 = df["price"].quantile(0.25)
Q3 = df["price"].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df = df[(df["price"] >= lower_bound) & (df["price"] <= upper_bound)]

df.info()

df.sample(10)

X = df['rating'].values
y = df['price'].values

"""> ### **Using Least Square Method which minimizes the sum of the squared differences between observed values and the values predicted by the model.**"""

X_mean = np.mean(X)
y_mean = np.mean(y)

num = np.sum((X - X_mean) * (y - y_mean))
den = np.sum((X - X_mean) ** 2)
m = num / den
b = y_mean - m * X_mean

def predict(x):
    return  m*x + b
# To create a line which would give the required y based on x

y_pred = predict(X)

"""> ### **Visualizing the result**"""

plt.scatter(X, y, color='blue', label="Actual Ratings")
plt.plot(X, y_pred, color='red', label="Regression Line")
plt.xlabel("Rating")
plt.ylabel("Price")
plt.title("Simple Linear Regression: Price vs Rating")
plt.legend()
plt.show()

print("Slope : ",m)
print("Intercept : ",b)

rating_test = float(input("Enter the rating of the wine : "))
predicted_price = predict(rating_test)
print("Predicted Price for Rating ",rating_test," : ", predicted_price)